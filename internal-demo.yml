AWSTemplateFormatVersion: "2010-09-09"
Description: >-
  Business Usecase- CF will use Packer AMI to provision infra - the AWS resources i.e EC2/ELB/ASG. Entire process of Infrastructure build will be orchestrated through the Jenkins. 
  This automation will take care of setting up security groups, policies. Technical description- Jenkins job will trigger the AWS CF template in.yaml format placed in GitHub. It will automatically orchestrate the infra provisioning.
Parameters:
  ImageId:
    Description: EC2 instance type..Provide base AMI or Packer AMI reference
    Type: AWS::EC2::Image::Id
    Default: ami-0b30f414963cf4a6c
  InstanceType:
    Description:  EC2 instance type
    Type: String
    Default: t2.small
    AllowedValues:
      - t2.nano
      - t2.micro
      - t2.small 
      - t2.medium	  
  AvailabilityZone:
    Description: EC2 Availability Zone
    Type: AWS::EC2::AvailabilityZone::Name
    Default: us-west-1c
    AllowedValues:
      - us-west-1a
      - us-west-1b
      - us-west-1c	  
  KeyName:
    Description: Provide Existing keypair name.
    Type: AWS::EC2::KeyPair::KeyName
    Default: california.pem
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.	
  SecurityGroupIds:
    Type: AWS::EC2::SecurityGroup::Id
    Default: sg-0ac6feef92001f848
    
Resources:
#  InstanceGroup: ASG automatically spins up desired capacity of EC2 instances with defined launch configuration. 
#  Create Autoscaling group in specific AZ, with minimum instances/servers as 2, max 4 and desired as 3. Launch configuration is provided and ELB is attached.
  InstanceGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AvailabilityZones:
        - "us-west-1c"
      LaunchConfigurationName: !Ref 'LaunchConfig'
      MinSize: '1'
      MaxSize: '3'
      DesiredCapacity: '2'
      LoadBalancerNames: [!Ref 'MyLoadBalancerTest']
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: '1'
        MaxBatchSize: '1'
        PauseTime: PT15M
        WaitOnResourceSignals: 'true'  
      ImageId: !Ref ImageId
      InstanceType: !Ref InstanceType
      AvailabilityZone: !Ref AvailabilityZone
      KeyName: !Ref KeyName
      
#  ServerScaleUpPolicy and ServerScaleDownPolicy: This will scale-out(increase) or scale-in(decrease) EC2 instances/servers based on defined scaling policies referring to CPU threshold usage.
  ServerScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref 'InstanceGroup'
      Cooldown: '60'
      ScalingAdjustment: 1
      
  ServerScaleDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref 'InstanceGroup'
      Cooldown: '60'
      ScalingAdjustment: -1
      
  CPUAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Scale-up if CPU > 70% for 2 minutes
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 120
      EvaluationPeriods: 1
      Threshold: 70
      AlarmActions: [!Ref 'ServerScaleUpPolicy']
      Dimensions:
      - Name: AutoScalingGroupName
        Value: !Ref 'InstanceGroup'
      ComparisonOperator: GreaterThanThreshold
      
  CPUAlarmLow:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Scale-down if CPU < 30% for 2 minutes
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 120
      EvaluationPeriods: 1
      Threshold: 30
      AlarmActions: [!Ref 'ServerScaleDownPolicy']
      Dimensions:
      - Name: AutoScalingGroupName
        Value: !Ref 'InstanceGroup'
      ComparisonOperator: LessThanThreshold
      
  LaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      KeyName: !Ref 'KeyName'
      ImageId: !Ref ImageId
      InstanceType: !Ref 'InstanceType'
      SecurityGroups:
        - !Ref SecurityGroupIds  

# ELB- On-the-fly, Elastic load balancer will be created and attached to ASG EC2 instances. 
# ELB DNS will be available to end-user and will not expose the application server (Ec2 servers) directly. ELB will monitor health of the instances based on defined checks			
  MyLoadBalancerTest:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      AvailabilityZones:
        - "us-west-1c"
      CrossZone: 'true'
      SecurityGroups:
        - Fn::GetAtt: [ LBSecurityGroup, GroupId ]
      Listeners:
        - LoadBalancerPort: '80'
          InstancePort: '8080'
          Protocol: tcp
      HealthCheck:
          Target: tcp:8080
          HealthyThreshold: '3'
          UnhealthyThreshold: '5'
          Interval: '30'
          Timeout: '5'
      ConnectionDrainingPolicy:
          Enabled: 'false'
          Timeout: '300'
          
  LBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access and HTTP access on the configured port
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: !Ref 'SSHLocation'
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '8080'
        ToPort: '8080'
        CidrIp: 0.0.0.0/0
